from abc import ABC, abstractmethod

class AbstractPipelineStep(ABC):
    """
    Abstract class defining the minimal methods required by a step in any pipeline
    of the BEERS2 suite of tools.
    """

    @abstractmethod
    def execute(self):
        """
        Entry point into the pipeline step.
        """
        pass

    @abstractmethod
    def validate(self):
        """
        Checks validity of parameters used to instantiate the pipeline step.

        Returns
        -------
        boolean
            True  - All parameters required to run this step were provided and
                    are within valid ranges.
            False - One or more of the paramters is missing or contains an invalid
                    value.
        """
        pass

    @abstractmethod
    def get_validation_attributes(self):
        """
        Prepare attributes required by the is_output_valid() method to validate
        output generated by executing this specific instance of the pipeline step.

        Returns
        -------
        dict
            Key-value pairings of attributes accepted by the is_output_valid()
            method.

        """
        pass

    @staticmethod
    @abstractmethod
    def is_output_valid(validation_attributes):
        """
        Check if output of this pipeline step, for a specific job/execution is
        correctly formed and valid, given the dictionary of valdiation attributes.
        Prepare these attributes for a given execution by calling the
        get_validation_attributes() method.

        Parameters
        ----------
        validation_attributes : dict
            Key-value pairings of attributes generated by the get_validation_attributes()
            method.

        Returns
        -------
        boolean
            True  - Output for this pipeline step were created and are well formed.
            False - Output for this pipeline step do not exist or are missing data.
        """
        pass
